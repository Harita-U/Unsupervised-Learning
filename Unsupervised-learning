{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Assesment_unsupervised_learning.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "XizytAfmKn-e"
      },
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "%matplotlib inline\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection  import train_test_split\n",
        "from sklearn import svm\n",
        "from sklearn.linear_model import LinearRegression"
      ],
      "execution_count": 207,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7p1V4iYpLrWC"
      },
      "source": [
        "vehicle=pd.read_csv('/content/vehicle.csv')"
      ],
      "execution_count": 208,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 131
        },
        "id": "EgquZOWPL6dW",
        "outputId": "72803668-a21d-414b-c77a-619e9f30f9ab"
      },
      "source": [
        "vehicle.head(2)"
      ],
      "execution_count": 209,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>compactness</th>\n",
              "      <th>circularity</th>\n",
              "      <th>distance_circularity</th>\n",
              "      <th>radius_ratio</th>\n",
              "      <th>pr.axis_aspect_ratio</th>\n",
              "      <th>max.length_aspect_ratio</th>\n",
              "      <th>scatter_ratio</th>\n",
              "      <th>elongatedness</th>\n",
              "      <th>pr.axis_rectangularity</th>\n",
              "      <th>max.length_rectangularity</th>\n",
              "      <th>scaled_variance</th>\n",
              "      <th>scaled_variance.1</th>\n",
              "      <th>scaled_radius_of_gyration</th>\n",
              "      <th>scaled_radius_of_gyration.1</th>\n",
              "      <th>skewness_about</th>\n",
              "      <th>skewness_about.1</th>\n",
              "      <th>skewness_about.2</th>\n",
              "      <th>hollows_ratio</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>95</td>\n",
              "      <td>48.0</td>\n",
              "      <td>83.0</td>\n",
              "      <td>178.0</td>\n",
              "      <td>72.0</td>\n",
              "      <td>10</td>\n",
              "      <td>162.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>159</td>\n",
              "      <td>176.0</td>\n",
              "      <td>379.0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>187.0</td>\n",
              "      <td>197</td>\n",
              "      <td>van</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>91</td>\n",
              "      <td>41.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>141.0</td>\n",
              "      <td>57.0</td>\n",
              "      <td>9</td>\n",
              "      <td>149.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>143</td>\n",
              "      <td>170.0</td>\n",
              "      <td>330.0</td>\n",
              "      <td>158.0</td>\n",
              "      <td>72.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>189.0</td>\n",
              "      <td>199</td>\n",
              "      <td>van</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   compactness  circularity  ...  hollows_ratio  class\n",
              "0           95         48.0  ...            197    van\n",
              "1           91         41.0  ...            199    van\n",
              "\n",
              "[2 rows x 19 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 209
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "id": "qJTLJrT1PiWS",
        "outputId": "2eaf50ef-a7c3-45b0-dfb5-08b344eb8b10"
      },
      "source": [
        "vehicle.groupby([\"class\"]).count()"
      ],
      "execution_count": 210,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>compactness</th>\n",
              "      <th>circularity</th>\n",
              "      <th>distance_circularity</th>\n",
              "      <th>radius_ratio</th>\n",
              "      <th>pr.axis_aspect_ratio</th>\n",
              "      <th>max.length_aspect_ratio</th>\n",
              "      <th>scatter_ratio</th>\n",
              "      <th>elongatedness</th>\n",
              "      <th>pr.axis_rectangularity</th>\n",
              "      <th>max.length_rectangularity</th>\n",
              "      <th>scaled_variance</th>\n",
              "      <th>scaled_variance.1</th>\n",
              "      <th>scaled_radius_of_gyration</th>\n",
              "      <th>scaled_radius_of_gyration.1</th>\n",
              "      <th>skewness_about</th>\n",
              "      <th>skewness_about.1</th>\n",
              "      <th>skewness_about.2</th>\n",
              "      <th>hollows_ratio</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>class</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>bus</th>\n",
              "      <td>218</td>\n",
              "      <td>214</td>\n",
              "      <td>215</td>\n",
              "      <td>216</td>\n",
              "      <td>217</td>\n",
              "      <td>218</td>\n",
              "      <td>218</td>\n",
              "      <td>218</td>\n",
              "      <td>217</td>\n",
              "      <td>218</td>\n",
              "      <td>218</td>\n",
              "      <td>218</td>\n",
              "      <td>216</td>\n",
              "      <td>217</td>\n",
              "      <td>214</td>\n",
              "      <td>218</td>\n",
              "      <td>218</td>\n",
              "      <td>218</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>car</th>\n",
              "      <td>429</td>\n",
              "      <td>428</td>\n",
              "      <td>429</td>\n",
              "      <td>426</td>\n",
              "      <td>428</td>\n",
              "      <td>429</td>\n",
              "      <td>428</td>\n",
              "      <td>428</td>\n",
              "      <td>428</td>\n",
              "      <td>429</td>\n",
              "      <td>427</td>\n",
              "      <td>427</td>\n",
              "      <td>429</td>\n",
              "      <td>426</td>\n",
              "      <td>427</td>\n",
              "      <td>428</td>\n",
              "      <td>428</td>\n",
              "      <td>429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>van</th>\n",
              "      <td>199</td>\n",
              "      <td>199</td>\n",
              "      <td>198</td>\n",
              "      <td>198</td>\n",
              "      <td>199</td>\n",
              "      <td>199</td>\n",
              "      <td>199</td>\n",
              "      <td>199</td>\n",
              "      <td>198</td>\n",
              "      <td>199</td>\n",
              "      <td>198</td>\n",
              "      <td>199</td>\n",
              "      <td>199</td>\n",
              "      <td>199</td>\n",
              "      <td>199</td>\n",
              "      <td>199</td>\n",
              "      <td>199</td>\n",
              "      <td>199</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       compactness  circularity  ...  skewness_about.2  hollows_ratio\n",
              "class                            ...                                 \n",
              "bus            218          214  ...               218            218\n",
              "car            429          428  ...               428            429\n",
              "van            199          199  ...               199            199\n",
              "\n",
              "[3 rows x 18 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 210
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mptvzSI7Qx85",
        "outputId": "44de649a-fad9-43b6-b96f-41057cefc9e6"
      },
      "source": [
        "vehicle.dtypes"
      ],
      "execution_count": 212,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "compactness                      int64\n",
              "circularity                    float64\n",
              "distance_circularity           float64\n",
              "radius_ratio                   float64\n",
              "pr.axis_aspect_ratio           float64\n",
              "max.length_aspect_ratio          int64\n",
              "scatter_ratio                  float64\n",
              "elongatedness                  float64\n",
              "pr.axis_rectangularity         float64\n",
              "max.length_rectangularity        int64\n",
              "scaled_variance                float64\n",
              "scaled_variance.1              float64\n",
              "scaled_radius_of_gyration      float64\n",
              "scaled_radius_of_gyration.1    float64\n",
              "skewness_about                 float64\n",
              "skewness_about.1               float64\n",
              "skewness_about.2               float64\n",
              "hollows_ratio                    int64\n",
              "class                           object\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 212
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bEDcSlZuyLIe",
        "outputId": "5b9f97d5-d17c-4574-a68b-89bdc625fd2a"
      },
      "source": [
        "print(vehicle.isnull().sum())"
      ],
      "execution_count": 213,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "compactness                    0\n",
            "circularity                    5\n",
            "distance_circularity           4\n",
            "radius_ratio                   6\n",
            "pr.axis_aspect_ratio           2\n",
            "max.length_aspect_ratio        0\n",
            "scatter_ratio                  1\n",
            "elongatedness                  1\n",
            "pr.axis_rectangularity         3\n",
            "max.length_rectangularity      0\n",
            "scaled_variance                3\n",
            "scaled_variance.1              2\n",
            "scaled_radius_of_gyration      2\n",
            "scaled_radius_of_gyration.1    4\n",
            "skewness_about                 6\n",
            "skewness_about.1               1\n",
            "skewness_about.2               1\n",
            "hollows_ratio                  0\n",
            "class                          0\n",
            "dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c6z6bsTIRLVm",
        "outputId": "785813d7-2ea6-466a-f6df-113047b104c6"
      },
      "source": [
        "vehicle.isnull().values.any() ## For checking the null values"
      ],
      "execution_count": 214,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 214
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t8YaikXHCxWp"
      },
      "source": [
        "#medianfilter=lambda x: x.fillna(x.median())\n",
        "#vehicle=vehicle.apply(medianfilter,axis=0)"
      ],
      "execution_count": 188,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AxHgE4CbynIu",
        "outputId": "7ea4ef9e-7581-4fa3-e31a-9573d0a4aee1"
      },
      "source": [
        "# Since the null values are present in the system, and I applying median filter but I found dropping the NaN value was giving far better accuracy \n",
        "# than median filter\n",
        "vehicle = vehicle.dropna() \n",
        "vehicle.count()"
      ],
      "execution_count": 215,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "compactness                    813\n",
              "circularity                    813\n",
              "distance_circularity           813\n",
              "radius_ratio                   813\n",
              "pr.axis_aspect_ratio           813\n",
              "max.length_aspect_ratio        813\n",
              "scatter_ratio                  813\n",
              "elongatedness                  813\n",
              "pr.axis_rectangularity         813\n",
              "max.length_rectangularity      813\n",
              "scaled_variance                813\n",
              "scaled_variance.1              813\n",
              "scaled_radius_of_gyration      813\n",
              "scaled_radius_of_gyration.1    813\n",
              "skewness_about                 813\n",
              "skewness_about.1               813\n",
              "skewness_about.2               813\n",
              "hollows_ratio                  813\n",
              "class                          813\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 215
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jNr1Ex6sj5Pm"
      },
      "source": [
        "replaceStruct={\"class\":{\"bus\":1,\"car\":2,\"van\":3}}"
      ],
      "execution_count": 216,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lwRw3s6OkuR8"
      },
      "source": [
        "vehicle=vehicle.replace(replaceStruct)"
      ],
      "execution_count": 217,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 100
        },
        "id": "IhmyJrd7ppuC",
        "outputId": "ef11a606-2b5a-4a52-d90b-9b08bb476fc1"
      },
      "source": [
        "vehicle.head(1)"
      ],
      "execution_count": 218,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>compactness</th>\n",
              "      <th>circularity</th>\n",
              "      <th>distance_circularity</th>\n",
              "      <th>radius_ratio</th>\n",
              "      <th>pr.axis_aspect_ratio</th>\n",
              "      <th>max.length_aspect_ratio</th>\n",
              "      <th>scatter_ratio</th>\n",
              "      <th>elongatedness</th>\n",
              "      <th>pr.axis_rectangularity</th>\n",
              "      <th>max.length_rectangularity</th>\n",
              "      <th>scaled_variance</th>\n",
              "      <th>scaled_variance.1</th>\n",
              "      <th>scaled_radius_of_gyration</th>\n",
              "      <th>scaled_radius_of_gyration.1</th>\n",
              "      <th>skewness_about</th>\n",
              "      <th>skewness_about.1</th>\n",
              "      <th>skewness_about.2</th>\n",
              "      <th>hollows_ratio</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>95</td>\n",
              "      <td>48.0</td>\n",
              "      <td>83.0</td>\n",
              "      <td>178.0</td>\n",
              "      <td>72.0</td>\n",
              "      <td>10</td>\n",
              "      <td>162.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>159</td>\n",
              "      <td>176.0</td>\n",
              "      <td>379.0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>187.0</td>\n",
              "      <td>197</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   compactness  circularity  ...  hollows_ratio  class\n",
              "0           95         48.0  ...            197      3\n",
              "\n",
              "[1 rows x 19 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 218
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K4fnJs8plQUV"
      },
      "source": [
        "vehicle['class']=vehicle['class'].astype('float64') # converting object type to float type"
      ],
      "execution_count": 219,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 658
        },
        "id": "FxYHGZVormFx",
        "outputId": "ef1d254c-36e1-4e78-d5e5-29718220d6c0"
      },
      "source": [
        "vehicle.corr()"
      ],
      "execution_count": 220,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>compactness</th>\n",
              "      <th>circularity</th>\n",
              "      <th>distance_circularity</th>\n",
              "      <th>radius_ratio</th>\n",
              "      <th>pr.axis_aspect_ratio</th>\n",
              "      <th>max.length_aspect_ratio</th>\n",
              "      <th>scatter_ratio</th>\n",
              "      <th>elongatedness</th>\n",
              "      <th>pr.axis_rectangularity</th>\n",
              "      <th>max.length_rectangularity</th>\n",
              "      <th>scaled_variance</th>\n",
              "      <th>scaled_variance.1</th>\n",
              "      <th>scaled_radius_of_gyration</th>\n",
              "      <th>scaled_radius_of_gyration.1</th>\n",
              "      <th>skewness_about</th>\n",
              "      <th>skewness_about.1</th>\n",
              "      <th>skewness_about.2</th>\n",
              "      <th>hollows_ratio</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>compactness</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.689885</td>\n",
              "      <td>0.789955</td>\n",
              "      <td>0.688130</td>\n",
              "      <td>0.090557</td>\n",
              "      <td>0.150369</td>\n",
              "      <td>0.814026</td>\n",
              "      <td>-0.788051</td>\n",
              "      <td>0.814227</td>\n",
              "      <td>0.674902</td>\n",
              "      <td>0.764386</td>\n",
              "      <td>0.820240</td>\n",
              "      <td>0.581405</td>\n",
              "      <td>-0.258437</td>\n",
              "      <td>0.231648</td>\n",
              "      <td>0.168384</td>\n",
              "      <td>0.296195</td>\n",
              "      <td>0.372806</td>\n",
              "      <td>-0.037391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>circularity</th>\n",
              "      <td>0.689885</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.797704</td>\n",
              "      <td>0.623950</td>\n",
              "      <td>0.155023</td>\n",
              "      <td>0.251619</td>\n",
              "      <td>0.858149</td>\n",
              "      <td>-0.825108</td>\n",
              "      <td>0.856137</td>\n",
              "      <td>0.965366</td>\n",
              "      <td>0.806108</td>\n",
              "      <td>0.850932</td>\n",
              "      <td>0.935594</td>\n",
              "      <td>0.049070</td>\n",
              "      <td>0.141726</td>\n",
              "      <td>-0.001975</td>\n",
              "      <td>-0.113902</td>\n",
              "      <td>0.049331</td>\n",
              "      <td>-0.161018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>distance_circularity</th>\n",
              "      <td>0.789955</td>\n",
              "      <td>0.797704</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.771404</td>\n",
              "      <td>0.163386</td>\n",
              "      <td>0.265591</td>\n",
              "      <td>0.909023</td>\n",
              "      <td>-0.912713</td>\n",
              "      <td>0.897261</td>\n",
              "      <td>0.773459</td>\n",
              "      <td>0.865683</td>\n",
              "      <td>0.891789</td>\n",
              "      <td>0.705689</td>\n",
              "      <td>-0.238145</td>\n",
              "      <td>0.110280</td>\n",
              "      <td>0.277851</td>\n",
              "      <td>0.145258</td>\n",
              "      <td>0.343228</td>\n",
              "      <td>-0.067445</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>radius_ratio</th>\n",
              "      <td>0.688130</td>\n",
              "      <td>0.623950</td>\n",
              "      <td>0.771404</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.667375</td>\n",
              "      <td>0.452460</td>\n",
              "      <td>0.743470</td>\n",
              "      <td>-0.795761</td>\n",
              "      <td>0.716210</td>\n",
              "      <td>0.570478</td>\n",
              "      <td>0.806788</td>\n",
              "      <td>0.731773</td>\n",
              "      <td>0.544636</td>\n",
              "      <td>-0.175348</td>\n",
              "      <td>0.044693</td>\n",
              "      <td>0.178079</td>\n",
              "      <td>0.375591</td>\n",
              "      <td>0.470895</td>\n",
              "      <td>-0.199219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pr.axis_aspect_ratio</th>\n",
              "      <td>0.090557</td>\n",
              "      <td>0.155023</td>\n",
              "      <td>0.163386</td>\n",
              "      <td>0.667375</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.652093</td>\n",
              "      <td>0.113696</td>\n",
              "      <td>-0.191193</td>\n",
              "      <td>0.086992</td>\n",
              "      <td>0.133553</td>\n",
              "      <td>0.290375</td>\n",
              "      <td>0.100668</td>\n",
              "      <td>0.135663</td>\n",
              "      <td>0.173060</td>\n",
              "      <td>-0.059244</td>\n",
              "      <td>-0.040769</td>\n",
              "      <td>0.229702</td>\n",
              "      <td>0.257566</td>\n",
              "      <td>-0.114292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max.length_aspect_ratio</th>\n",
              "      <td>0.150369</td>\n",
              "      <td>0.251619</td>\n",
              "      <td>0.265591</td>\n",
              "      <td>0.452460</td>\n",
              "      <td>0.652093</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.171445</td>\n",
              "      <td>-0.183242</td>\n",
              "      <td>0.167514</td>\n",
              "      <td>0.309180</td>\n",
              "      <td>0.331124</td>\n",
              "      <td>0.150069</td>\n",
              "      <td>0.197179</td>\n",
              "      <td>0.308329</td>\n",
              "      <td>0.016461</td>\n",
              "      <td>0.041210</td>\n",
              "      <td>-0.030543</td>\n",
              "      <td>0.139283</td>\n",
              "      <td>0.202235</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>scatter_ratio</th>\n",
              "      <td>0.814026</td>\n",
              "      <td>0.858149</td>\n",
              "      <td>0.909023</td>\n",
              "      <td>0.743470</td>\n",
              "      <td>0.113696</td>\n",
              "      <td>0.171445</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.973413</td>\n",
              "      <td>0.991992</td>\n",
              "      <td>0.808154</td>\n",
              "      <td>0.950067</td>\n",
              "      <td>0.996396</td>\n",
              "      <td>0.795748</td>\n",
              "      <td>-0.045632</td>\n",
              "      <td>0.070118</td>\n",
              "      <td>0.227375</td>\n",
              "      <td>0.009967</td>\n",
              "      <td>0.138424</td>\n",
              "      <td>-0.287590</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>elongatedness</th>\n",
              "      <td>-0.788051</td>\n",
              "      <td>-0.825108</td>\n",
              "      <td>-0.912713</td>\n",
              "      <td>-0.795761</td>\n",
              "      <td>-0.191193</td>\n",
              "      <td>-0.183242</td>\n",
              "      <td>-0.973413</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.950345</td>\n",
              "      <td>-0.771099</td>\n",
              "      <td>-0.937846</td>\n",
              "      <td>-0.956858</td>\n",
              "      <td>-0.761563</td>\n",
              "      <td>0.119750</td>\n",
              "      <td>-0.046621</td>\n",
              "      <td>-0.201325</td>\n",
              "      <td>-0.117568</td>\n",
              "      <td>-0.233408</td>\n",
              "      <td>0.342712</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pr.axis_rectangularity</th>\n",
              "      <td>0.814227</td>\n",
              "      <td>0.856137</td>\n",
              "      <td>0.897261</td>\n",
              "      <td>0.716210</td>\n",
              "      <td>0.086992</td>\n",
              "      <td>0.167514</td>\n",
              "      <td>0.991992</td>\n",
              "      <td>-0.950345</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.811979</td>\n",
              "      <td>0.935653</td>\n",
              "      <td>0.992119</td>\n",
              "      <td>0.792895</td>\n",
              "      <td>-0.033769</td>\n",
              "      <td>0.078701</td>\n",
              "      <td>0.231171</td>\n",
              "      <td>-0.017383</td>\n",
              "      <td>0.117202</td>\n",
              "      <td>-0.255354</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max.length_rectangularity</th>\n",
              "      <td>0.674902</td>\n",
              "      <td>0.965366</td>\n",
              "      <td>0.773459</td>\n",
              "      <td>0.570478</td>\n",
              "      <td>0.133553</td>\n",
              "      <td>0.309180</td>\n",
              "      <td>0.808154</td>\n",
              "      <td>-0.771099</td>\n",
              "      <td>0.811979</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.744760</td>\n",
              "      <td>0.796230</td>\n",
              "      <td>0.865240</td>\n",
              "      <td>0.031098</td>\n",
              "      <td>0.130356</td>\n",
              "      <td>0.013045</td>\n",
              "      <td>-0.108019</td>\n",
              "      <td>0.086792</td>\n",
              "      <td>-0.025539</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>scaled_variance</th>\n",
              "      <td>0.764386</td>\n",
              "      <td>0.806108</td>\n",
              "      <td>0.865683</td>\n",
              "      <td>0.806788</td>\n",
              "      <td>0.290375</td>\n",
              "      <td>0.331124</td>\n",
              "      <td>0.950067</td>\n",
              "      <td>-0.937846</td>\n",
              "      <td>0.935653</td>\n",
              "      <td>0.744760</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.947617</td>\n",
              "      <td>0.776051</td>\n",
              "      <td>0.099371</td>\n",
              "      <td>0.034228</td>\n",
              "      <td>0.208966</td>\n",
              "      <td>0.017828</td>\n",
              "      <td>0.104989</td>\n",
              "      <td>-0.311065</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>scaled_variance.1</th>\n",
              "      <td>0.820240</td>\n",
              "      <td>0.850932</td>\n",
              "      <td>0.891789</td>\n",
              "      <td>0.731773</td>\n",
              "      <td>0.100668</td>\n",
              "      <td>0.150069</td>\n",
              "      <td>0.996396</td>\n",
              "      <td>-0.956858</td>\n",
              "      <td>0.992119</td>\n",
              "      <td>0.796230</td>\n",
              "      <td>0.947617</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.791997</td>\n",
              "      <td>-0.037903</td>\n",
              "      <td>0.072393</td>\n",
              "      <td>0.220054</td>\n",
              "      <td>0.011782</td>\n",
              "      <td>0.125118</td>\n",
              "      <td>-0.286044</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>scaled_radius_of_gyration</th>\n",
              "      <td>0.581405</td>\n",
              "      <td>0.935594</td>\n",
              "      <td>0.705689</td>\n",
              "      <td>0.544636</td>\n",
              "      <td>0.135663</td>\n",
              "      <td>0.197179</td>\n",
              "      <td>0.795748</td>\n",
              "      <td>-0.761563</td>\n",
              "      <td>0.792895</td>\n",
              "      <td>0.865240</td>\n",
              "      <td>0.776051</td>\n",
              "      <td>0.791997</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.177284</td>\n",
              "      <td>0.162397</td>\n",
              "      <td>-0.041153</td>\n",
              "      <td>-0.224495</td>\n",
              "      <td>-0.102167</td>\n",
              "      <td>-0.243083</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>scaled_radius_of_gyration.1</th>\n",
              "      <td>-0.258437</td>\n",
              "      <td>0.049070</td>\n",
              "      <td>-0.238145</td>\n",
              "      <td>-0.175348</td>\n",
              "      <td>0.173060</td>\n",
              "      <td>0.308329</td>\n",
              "      <td>-0.045632</td>\n",
              "      <td>0.119750</td>\n",
              "      <td>-0.033769</td>\n",
              "      <td>0.031098</td>\n",
              "      <td>0.099371</td>\n",
              "      <td>-0.037903</td>\n",
              "      <td>0.177284</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.088109</td>\n",
              "      <td>-0.120600</td>\n",
              "      <td>-0.748668</td>\n",
              "      <td>-0.798810</td>\n",
              "      <td>-0.193428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>skewness_about</th>\n",
              "      <td>0.231648</td>\n",
              "      <td>0.141726</td>\n",
              "      <td>0.110280</td>\n",
              "      <td>0.044693</td>\n",
              "      <td>-0.059244</td>\n",
              "      <td>0.016461</td>\n",
              "      <td>0.070118</td>\n",
              "      <td>-0.046621</td>\n",
              "      <td>0.078701</td>\n",
              "      <td>0.130356</td>\n",
              "      <td>0.034228</td>\n",
              "      <td>0.072393</td>\n",
              "      <td>0.162397</td>\n",
              "      <td>-0.088109</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.022611</td>\n",
              "      <td>0.111135</td>\n",
              "      <td>0.098128</td>\n",
              "      <td>0.121780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>skewness_about.1</th>\n",
              "      <td>0.168384</td>\n",
              "      <td>-0.001975</td>\n",
              "      <td>0.277851</td>\n",
              "      <td>0.178079</td>\n",
              "      <td>-0.040769</td>\n",
              "      <td>0.041210</td>\n",
              "      <td>0.227375</td>\n",
              "      <td>-0.201325</td>\n",
              "      <td>0.231171</td>\n",
              "      <td>0.013045</td>\n",
              "      <td>0.208966</td>\n",
              "      <td>0.220054</td>\n",
              "      <td>-0.041153</td>\n",
              "      <td>-0.120600</td>\n",
              "      <td>-0.022611</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.077942</td>\n",
              "      <td>0.201286</td>\n",
              "      <td>-0.020470</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>skewness_about.2</th>\n",
              "      <td>0.296195</td>\n",
              "      <td>-0.113902</td>\n",
              "      <td>0.145258</td>\n",
              "      <td>0.375591</td>\n",
              "      <td>0.229702</td>\n",
              "      <td>-0.030543</td>\n",
              "      <td>0.009967</td>\n",
              "      <td>-0.117568</td>\n",
              "      <td>-0.017383</td>\n",
              "      <td>-0.108019</td>\n",
              "      <td>0.017828</td>\n",
              "      <td>0.011782</td>\n",
              "      <td>-0.224495</td>\n",
              "      <td>-0.748668</td>\n",
              "      <td>0.111135</td>\n",
              "      <td>0.077942</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.894057</td>\n",
              "      <td>0.048421</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hollows_ratio</th>\n",
              "      <td>0.372806</td>\n",
              "      <td>0.049331</td>\n",
              "      <td>0.343228</td>\n",
              "      <td>0.470895</td>\n",
              "      <td>0.257566</td>\n",
              "      <td>0.139283</td>\n",
              "      <td>0.138424</td>\n",
              "      <td>-0.233408</td>\n",
              "      <td>0.117202</td>\n",
              "      <td>0.086792</td>\n",
              "      <td>0.104989</td>\n",
              "      <td>0.125118</td>\n",
              "      <td>-0.102167</td>\n",
              "      <td>-0.798810</td>\n",
              "      <td>0.098128</td>\n",
              "      <td>0.201286</td>\n",
              "      <td>0.894057</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.212830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>class</th>\n",
              "      <td>-0.037391</td>\n",
              "      <td>-0.161018</td>\n",
              "      <td>-0.067445</td>\n",
              "      <td>-0.199219</td>\n",
              "      <td>-0.114292</td>\n",
              "      <td>0.202235</td>\n",
              "      <td>-0.287590</td>\n",
              "      <td>0.342712</td>\n",
              "      <td>-0.255354</td>\n",
              "      <td>-0.025539</td>\n",
              "      <td>-0.311065</td>\n",
              "      <td>-0.286044</td>\n",
              "      <td>-0.243083</td>\n",
              "      <td>-0.193428</td>\n",
              "      <td>0.121780</td>\n",
              "      <td>-0.020470</td>\n",
              "      <td>0.048421</td>\n",
              "      <td>0.212830</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                             compactness  circularity  ...  hollows_ratio     class\n",
              "compactness                     1.000000     0.689885  ...       0.372806 -0.037391\n",
              "circularity                     0.689885     1.000000  ...       0.049331 -0.161018\n",
              "distance_circularity            0.789955     0.797704  ...       0.343228 -0.067445\n",
              "radius_ratio                    0.688130     0.623950  ...       0.470895 -0.199219\n",
              "pr.axis_aspect_ratio            0.090557     0.155023  ...       0.257566 -0.114292\n",
              "max.length_aspect_ratio         0.150369     0.251619  ...       0.139283  0.202235\n",
              "scatter_ratio                   0.814026     0.858149  ...       0.138424 -0.287590\n",
              "elongatedness                  -0.788051    -0.825108  ...      -0.233408  0.342712\n",
              "pr.axis_rectangularity          0.814227     0.856137  ...       0.117202 -0.255354\n",
              "max.length_rectangularity       0.674902     0.965366  ...       0.086792 -0.025539\n",
              "scaled_variance                 0.764386     0.806108  ...       0.104989 -0.311065\n",
              "scaled_variance.1               0.820240     0.850932  ...       0.125118 -0.286044\n",
              "scaled_radius_of_gyration       0.581405     0.935594  ...      -0.102167 -0.243083\n",
              "scaled_radius_of_gyration.1    -0.258437     0.049070  ...      -0.798810 -0.193428\n",
              "skewness_about                  0.231648     0.141726  ...       0.098128  0.121780\n",
              "skewness_about.1                0.168384    -0.001975  ...       0.201286 -0.020470\n",
              "skewness_about.2                0.296195    -0.113902  ...       0.894057  0.048421\n",
              "hollows_ratio                   0.372806     0.049331  ...       1.000000  0.212830\n",
              "class                          -0.037391    -0.161018  ...       0.212830  1.000000\n",
              "\n",
              "[19 rows x 19 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 220
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N7EMX7zbp4ju"
      },
      "source": [
        "x=vehicle.drop(['class','scaled_radius_of_gyration'],axis=1)\n",
        "y=vehicle[['class']]\n",
        "[x_train,x_test,y_train,y_test]=train_test_split(x,y,test_size=0.3,random_state=100)\n",
        "##scaled_radius_of_gyration\t can also be dropped since it has high correlation with circularity"
      ],
      "execution_count": 221,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oc4VZn8Z_9sI",
        "outputId": "f8c1bc14-628a-4dec-ff1e-95568b139a58"
      },
      "source": [
        "from sklearn.svm import SVC\n",
        "\n",
        "svc = SVC()\n",
        "svc.fit(x_train, y_train)\n",
        "a_SVC=format(svc.score(x_test, y_test))\n",
        "print(\"Accuracy on training set: {:.2f}\".format(svc.score(x_train, y_train)))\n",
        "print(\"Accuracy on test set: {:.2f}\".format(svc.score(x_test, y_test)))"
      ],
      "execution_count": 283,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.66\n",
            "Accuracy on test set: 0.66\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JR8kCSdiAUpE"
      },
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "scaler = MinMaxScaler()\n",
        "x_train_scaled = scaler.fit_transform(x_train)\n",
        "x_test_scaled = scaler.fit_transform(x_test)\n",
        "## Applying min max scalor was giving better accuracy"
      ],
      "execution_count": 223,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xZl9y-7BGXBp"
      },
      "source": [
        "y_pred=svc.predict(x_test_scaled)"
      ],
      "execution_count": 224,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dBIGushoAYIO",
        "outputId": "dc1c3f4b-d705-4fde-bcef-eba1d0023823"
      },
      "source": [
        "svc = SVC()\n",
        "svc.fit(x_train_scaled, y_train)\n",
        "\n",
        "print(\"Accuracy on training set: {:.2f}\".format(svc.score(x_train_scaled, y_train)))\n",
        "print(\"Accuracy on test set: {:.2f}\".format(svc.score(x_test_scaled, y_test)))\n",
        "a_SVC_scalor=format(svc.score(x_test_scaled, y_test))"
      ],
      "execution_count": 285,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.95\n",
            "Accuracy on test set: 0.95\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pVkuW8gqLV0A"
      },
      "source": [
        "## K cross fold validtion"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 100
        },
        "id": "GScxZakJqHQT",
        "outputId": "8afc32cd-7d4b-45a8-b8df-f97539e9705c"
      },
      "source": [
        "vehicle.head(1)"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>compactness</th>\n",
              "      <th>circularity</th>\n",
              "      <th>distance_circularity</th>\n",
              "      <th>radius_ratio</th>\n",
              "      <th>pr.axis_aspect_ratio</th>\n",
              "      <th>max.length_aspect_ratio</th>\n",
              "      <th>scatter_ratio</th>\n",
              "      <th>elongatedness</th>\n",
              "      <th>pr.axis_rectangularity</th>\n",
              "      <th>max.length_rectangularity</th>\n",
              "      <th>scaled_variance</th>\n",
              "      <th>scaled_variance.1</th>\n",
              "      <th>scaled_radius_of_gyration</th>\n",
              "      <th>scaled_radius_of_gyration.1</th>\n",
              "      <th>skewness_about</th>\n",
              "      <th>skewness_about.1</th>\n",
              "      <th>skewness_about.2</th>\n",
              "      <th>hollows_ratio</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>95</td>\n",
              "      <td>48.0</td>\n",
              "      <td>83.0</td>\n",
              "      <td>178.0</td>\n",
              "      <td>72.0</td>\n",
              "      <td>10</td>\n",
              "      <td>162.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>159</td>\n",
              "      <td>176.0</td>\n",
              "      <td>379.0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>187.0</td>\n",
              "      <td>197</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   compactness  circularity  ...  hollows_ratio  class\n",
              "0           95         48.0  ...            197    3.0\n",
              "\n",
              "[1 rows x 19 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SFn3MDgH7Coz",
        "outputId": "91d08081-90ba-42d3-f415-7640354eace4"
      },
      "source": [
        "from pandas import read_csv\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.model_selection import cross_val_score\n",
        "import numpy as np\n",
        "\n",
        "#array = dataframe.values\n",
        "#X = array[:,0:8]\n",
        "#Y = array[:,8]\n",
        "\n",
        "#X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.30, random_state=1)\n",
        "\n",
        "num_folds = 10\n",
        "seed = 7\n",
        "\n",
        "kfold = KFold(n_splits=num_folds, random_state=seed)\n",
        "model = SVC()\n",
        "results = cross_val_score(model, x, y, cv=kfold)\n",
        "print(results)\n",
        "a_SVC_kfold=results.mean()\n",
        "print(\"Accuracy: %.3f%% (%.3f%%)\" % (results.mean()*100.0, results.std()*100.0))"
      ],
      "execution_count": 282,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[0.64634146 0.64634146 0.70731707 0.62962963 0.61728395 0.75308642\n",
            " 0.74074074 0.60493827 0.7037037  0.72839506]\n",
            "Accuracy: 67.778% (5.196%)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TEHREerQA_RC"
      },
      "source": [
        "## Applying the PCA"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ukoMXJnOFGdq"
      },
      "source": [
        "from sklearn.decomposition import PCA"
      ],
      "execution_count": 227,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "dHwYXmU9gbGS",
        "outputId": "17c955b4-978f-4fd2-e16e-7c41039c3f14"
      },
      "source": [
        "X=x\n",
        "from scipy.stats import zscore\n",
        "XScaled=X.apply(zscore)\n",
        "XScaled.head()"
      ],
      "execution_count": 228,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>compactness</th>\n",
              "      <th>circularity</th>\n",
              "      <th>distance_circularity</th>\n",
              "      <th>radius_ratio</th>\n",
              "      <th>pr.axis_aspect_ratio</th>\n",
              "      <th>max.length_aspect_ratio</th>\n",
              "      <th>scatter_ratio</th>\n",
              "      <th>elongatedness</th>\n",
              "      <th>pr.axis_rectangularity</th>\n",
              "      <th>max.length_rectangularity</th>\n",
              "      <th>scaled_variance</th>\n",
              "      <th>scaled_variance.1</th>\n",
              "      <th>scaled_radius_of_gyration.1</th>\n",
              "      <th>skewness_about</th>\n",
              "      <th>skewness_about.1</th>\n",
              "      <th>skewness_about.2</th>\n",
              "      <th>hollows_ratio</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.163231</td>\n",
              "      <td>0.520408</td>\n",
              "      <td>0.060669</td>\n",
              "      <td>0.264970</td>\n",
              "      <td>1.283254</td>\n",
              "      <td>0.299721</td>\n",
              "      <td>-0.198517</td>\n",
              "      <td>0.129648</td>\n",
              "      <td>-0.217151</td>\n",
              "      <td>0.766312</td>\n",
              "      <td>-0.397397</td>\n",
              "      <td>-0.339014</td>\n",
              "      <td>-0.321192</td>\n",
              "      <td>-0.071523</td>\n",
              "      <td>0.371287</td>\n",
              "      <td>-0.321809</td>\n",
              "      <td>0.171837</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.322874</td>\n",
              "      <td>-0.619123</td>\n",
              "      <td>0.124067</td>\n",
              "      <td>-0.836393</td>\n",
              "      <td>-0.599253</td>\n",
              "      <td>0.085785</td>\n",
              "      <td>-0.591720</td>\n",
              "      <td>0.514333</td>\n",
              "      <td>-0.606014</td>\n",
              "      <td>-0.337462</td>\n",
              "      <td>-0.590034</td>\n",
              "      <td>-0.618754</td>\n",
              "      <td>-0.053505</td>\n",
              "      <td>0.538425</td>\n",
              "      <td>0.147109</td>\n",
              "      <td>0.003400</td>\n",
              "      <td>0.442318</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.256966</td>\n",
              "      <td>0.845988</td>\n",
              "      <td>1.518823</td>\n",
              "      <td>1.187734</td>\n",
              "      <td>0.530251</td>\n",
              "      <td>0.299721</td>\n",
              "      <td>1.162569</td>\n",
              "      <td>-1.152637</td>\n",
              "      <td>0.949438</td>\n",
              "      <td>0.697326</td>\n",
              "      <td>1.111591</td>\n",
              "      <td>1.122486</td>\n",
              "      <td>0.080339</td>\n",
              "      <td>1.555006</td>\n",
              "      <td>-0.413338</td>\n",
              "      <td>-0.159204</td>\n",
              "      <td>0.036596</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.079822</td>\n",
              "      <td>-0.619123</td>\n",
              "      <td>-0.002729</td>\n",
              "      <td>-0.300595</td>\n",
              "      <td>0.153750</td>\n",
              "      <td>0.085785</td>\n",
              "      <td>-0.742952</td>\n",
              "      <td>0.642562</td>\n",
              "      <td>-0.606014</td>\n",
              "      <td>-0.337462</td>\n",
              "      <td>-0.911095</td>\n",
              "      <td>-0.738643</td>\n",
              "      <td>-1.258099</td>\n",
              "      <td>-0.071523</td>\n",
              "      <td>-0.301249</td>\n",
              "      <td>1.629444</td>\n",
              "      <td>1.524243</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.052030</td>\n",
              "      <td>-0.130753</td>\n",
              "      <td>-0.763506</td>\n",
              "      <td>1.068668</td>\n",
              "      <td>5.173770</td>\n",
              "      <td>9.285029</td>\n",
              "      <td>-0.591720</td>\n",
              "      <td>0.514333</td>\n",
              "      <td>-0.606014</td>\n",
              "      <td>-0.268476</td>\n",
              "      <td>1.689501</td>\n",
              "      <td>-0.647299</td>\n",
              "      <td>7.307905</td>\n",
              "      <td>0.538425</td>\n",
              "      <td>-0.189159</td>\n",
              "      <td>-1.460039</td>\n",
              "      <td>-1.721531</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   compactness  circularity  ...  skewness_about.2  hollows_ratio\n",
              "0     0.163231     0.520408  ...         -0.321809       0.171837\n",
              "1    -0.322874    -0.619123  ...          0.003400       0.442318\n",
              "2     1.256966     0.845988  ...         -0.159204       0.036596\n",
              "3    -0.079822    -0.619123  ...          1.629444       1.524243\n",
              "4    -1.052030    -0.130753  ...         -1.460039      -1.721531\n",
              "\n",
              "[5 rows x 17 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 228
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9C8lHQv8gp5S",
        "outputId": "0f84c92b-68d5-478f-f212-8388e83bb6e9"
      },
      "source": [
        "covMatrix = np.cov(XScaled,rowvar=False)\n",
        "print(covMatrix)"
      ],
      "execution_count": 229,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 1.00123153  0.69073497  0.79092746  0.68897729  0.09066804  0.1505537\n",
            "   0.81502868 -0.78902127  0.81522961  0.67573322  0.76532752  0.82125027\n",
            "  -0.25875528  0.23193313  0.16859183  0.29656022  0.3732647 ]\n",
            " [ 0.69073497  1.00123153  0.79868656  0.62471862  0.15521415  0.25192897\n",
            "   0.85920548 -0.8261242   0.85719089  0.96655501  0.80710097  0.85197956\n",
            "   0.0491303   0.1419004  -0.00197723 -0.1140426   0.04939203]\n",
            " [ 0.79092746  0.79868656  1.00123153  0.77235395  0.16358689  0.26591783\n",
            "   0.91014241 -0.9138366   0.89836576  0.77441118  0.86674929  0.89288735\n",
            "  -0.23843852  0.11041593  0.278193    0.14543699  0.34365085]\n",
            " [ 0.68897729  0.62471862  0.77235395  1.00123153  0.66819724  0.45301698\n",
            "   0.74438595 -0.79674104  0.71709175  0.57118076  0.80778118  0.73267385\n",
            "  -0.17556405  0.04474816  0.17829807  0.37605357  0.47147529]\n",
            " [ 0.09066804  0.15521415  0.16358689  0.66819724  1.00123153  0.6528959\n",
            "   0.11383635 -0.19142882  0.08709873  0.13371753  0.29073296  0.10079166\n",
            "   0.17327362 -0.05931667 -0.04081886  0.22998448  0.25788318]\n",
            " [ 0.1505537   0.25192897  0.26591783  0.45301698  0.6528959   1.00123153\n",
            "   0.17165622 -0.18346816  0.16772014  0.30956088  0.33153186  0.15025349\n",
            "   0.30870835  0.01648166  0.04126053 -0.03058065  0.13945419]\n",
            " [ 0.81502868  0.85920548  0.91014241  0.74438595  0.11383635  0.17165622\n",
            "   1.00123153 -0.97461169  0.99321402  0.80914895  0.95123751  0.99762263\n",
            "  -0.04568825  0.07020422  0.22765518  0.00997918  0.13859428]\n",
            " [-0.78902127 -0.8261242  -0.9138366  -0.79674104 -0.19142882 -0.18346816\n",
            "  -0.97461169  1.00123153 -0.95151538 -0.7720487  -0.93900061 -0.95803596\n",
            "   0.11989713 -0.04667832 -0.20157325 -0.11771267 -0.23369509]\n",
            " [ 0.81522961  0.85719089  0.89836576  0.71709175  0.08709873  0.16772014\n",
            "   0.99321402 -0.95151538  1.00123153  0.81297896  0.93680528  0.99334122\n",
            "  -0.0338105   0.07879827  0.23145534 -0.01740457  0.11734664]\n",
            " [ 0.67573322  0.96655501  0.77441118  0.57118076  0.13371753  0.30956088\n",
            "   0.80914895 -0.7720487   0.81297896  1.00123153  0.74567768  0.79721018\n",
            "   0.03113609  0.1305165   0.01306069 -0.1081518   0.08689924]\n",
            " [ 0.76532752  0.80710097  0.86674929  0.80778118  0.29073296  0.33153186\n",
            "   0.95123751 -0.93900061  0.93680528  0.74567768  1.00123153  0.94878385\n",
            "   0.09949344  0.03427042  0.20922369  0.01785045  0.10511871]\n",
            " [ 0.82125027  0.85197956  0.89288735  0.73267385  0.10079166  0.15025349\n",
            "   0.99762263 -0.95803596  0.99334122  0.79721018  0.94878385  1.00123153\n",
            "  -0.03794995  0.07248206  0.22032505  0.01179646  0.12527211]\n",
            " [-0.25875528  0.0491303  -0.23843852 -0.17556405  0.17327362  0.30870835\n",
            "  -0.04568825  0.11989713 -0.0338105   0.03113609  0.09949344 -0.03794995\n",
            "   1.00123153 -0.08821744 -0.12074877 -0.74958968 -0.7997942 ]\n",
            " [ 0.23193313  0.1419004   0.11041593  0.04474816 -0.05931667  0.01648166\n",
            "   0.07020422 -0.04667832  0.07879827  0.1305165   0.03427042  0.07248206\n",
            "  -0.08821744  1.00123153 -0.02263933  0.11127169  0.0982493 ]\n",
            " [ 0.16859183 -0.00197723  0.278193    0.17829807 -0.04081886  0.04126053\n",
            "   0.22765518 -0.20157325  0.23145534  0.01306069  0.20922369  0.22032505\n",
            "  -0.12074877 -0.02263933  1.00123153  0.07803801  0.20153412]\n",
            " [ 0.29656022 -0.1140426   0.14543699  0.37605357  0.22998448 -0.03058065\n",
            "   0.00997918 -0.11771267 -0.01740457 -0.1081518   0.01785045  0.01179646\n",
            "  -0.74958968  0.11127169  0.07803801  1.00123153  0.89515759]\n",
            " [ 0.3732647   0.04939203  0.34365085  0.47147529  0.25788318  0.13945419\n",
            "   0.13859428 -0.23369509  0.11734664  0.08689924  0.10511871  0.12527211\n",
            "  -0.7997942   0.0982493   0.20153412  0.89515759  1.00123153]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tEGUBmeBgv1Q",
        "outputId": "a95f7300-07f2-45ba-8e30-1968ab02a958"
      },
      "source": [
        "pca = PCA(n_components=10)\n",
        "pca.fit(XScaled)"
      ],
      "execution_count": 237,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PCA(copy=True, iterated_power='auto', n_components=10, random_state=None,\n",
              "    svd_solver='auto', tol=0.0, whiten=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 237
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5TMK9L_Wg0-I",
        "outputId": "32e3cf6e-cb3b-4721-a2fb-ff0ab7bf2826"
      },
      "source": [
        "print(pca.explained_variance_)"
      ],
      "execution_count": 238,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[8.7919133  2.85439616 1.91485376 1.1213984  0.92470435 0.52460155\n",
            " 0.3080957  0.21851455 0.14892657 0.06512552]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jKK71Ux-g3_U",
        "outputId": "4a848253-07cf-4709-ae5d-43d16285c82c"
      },
      "source": [
        "print(pca.explained_variance_ratio_)"
      ],
      "execution_count": 239,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.51653524 0.16769913 0.11249991 0.06588347 0.05432747 0.03082096\n",
            " 0.01810098 0.01283799 0.00874961 0.0038262 ]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "395k4g1RhG6U",
        "outputId": "af8c61c3-6604-49d1-a2cc-f84f3f74677b"
      },
      "source": [
        "plt.bar(list(range(1,11)),pca.explained_variance_ratio_,alpha=0.5, align='center')\n",
        "plt.ylabel('Variation explained')\n",
        "plt.xlabel('eigen Value')\n",
        "plt.show()"
      ],
      "execution_count": 254,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "G5PeDTFZhLNa",
        "outputId": "9033c023-81e4-4cca-92cc-6c5952210271"
      },
      "source": [
        "plt.step(list(range(1,11)),np.cumsum(pca.explained_variance_ratio_), where='mid')\n",
        "plt.ylabel('Cum of variation explained')\n",
        "plt.xlabel('eigen Value')\n",
        "plt.show()"
      ],
      "execution_count": 255,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zIRbOiNUhW4S",
        "outputId": "f425130d-1374-4da1-ed1c-a63bb95ded7a"
      },
      "source": [
        "##As you can see where you get max variance explained is eigen value as 8\n",
        "pca8 = PCA(n_components=8)\n",
        "pca8.fit(XScaled)\n",
        "print(pca8.components_)\n",
        "print(pca8.explained_variance_ratio_)\n",
        "Xpca8 = pca8.transform(XScaled)"
      ],
      "execution_count": 265,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 2.88835189e-01  2.96920614e-01  3.17907472e-01  2.84525157e-01\n",
            "   8.95253186e-02  1.03653804e-01  3.27726126e-01 -3.25473118e-01\n",
            "   3.24259025e-01  2.85070443e-01  3.19920549e-01  3.24990129e-01\n",
            "  -3.84439217e-02  3.91797962e-02  7.34592586e-02  4.65355594e-02\n",
            "   9.66693932e-02]\n",
            " [-1.04547062e-01  1.50519209e-01 -4.53265632e-02 -1.50894429e-01\n",
            "  -8.60307942e-02  5.16191294e-02  7.56257711e-02 -1.37263567e-02\n",
            "   8.85702307e-02  1.37482578e-01  9.59953974e-02  7.89674946e-02\n",
            "   5.11132749e-01 -6.86187235e-02 -1.00149226e-01 -5.56504263e-01\n",
            "  -5.45644157e-01]\n",
            " [-1.17385605e-01 -3.96099390e-02 -5.88508965e-02  2.81798282e-01\n",
            "   6.48207659e-01  5.83835835e-01 -1.05768323e-01  6.18915932e-02\n",
            "  -1.19578875e-01 -2.73899444e-02  5.20010812e-02 -1.16694924e-01\n",
            "   2.62805222e-01 -1.03782179e-01 -8.68765101e-02  4.57284579e-02\n",
            "   6.98278927e-02]\n",
            " [ 1.14777235e-01  2.01042577e-01 -5.08625150e-02 -4.66245460e-02\n",
            "   8.97146038e-03  4.64445946e-02 -6.47320026e-02  6.63972566e-02\n",
            "  -5.93363995e-02  2.07204780e-01 -9.09842498e-02 -6.07219725e-02\n",
            "  -2.80508044e-02  6.63935126e-01 -6.53528214e-01  6.00116505e-02\n",
            "   9.67806460e-03]\n",
            " [ 5.10641464e-02 -1.02590140e-01  3.79259088e-02 -4.20465072e-02\n",
            "  -3.42702054e-02  2.07785931e-01 -2.23260583e-02  7.90305863e-02\n",
            "  -5.40410231e-03 -8.15455776e-02 -6.72530705e-04 -2.54926075e-02\n",
            "   1.40998153e-01  6.81891080e-01  6.57306273e-01 -8.95036703e-02\n",
            "  -1.78920910e-02]\n",
            " [ 9.48060910e-02 -2.79252712e-01 -1.50446779e-01  2.66740369e-01\n",
            "   2.70502381e-01 -4.78743669e-01  1.00279963e-01 -1.39360148e-01\n",
            "   7.20146418e-02 -4.79494295e-01  2.17915950e-01  1.35297471e-01\n",
            "   2.20019896e-01  1.97661198e-01 -1.29824207e-01  1.60905200e-01\n",
            "  -2.37241528e-01]\n",
            " [ 5.36863657e-01 -3.31652434e-01 -2.84363174e-02 -1.76852314e-01\n",
            "  -3.91928152e-01  4.58573910e-01  3.13722726e-02  4.96009251e-02\n",
            "   5.93529034e-02 -2.60096402e-01  1.50226224e-01  6.31854082e-02\n",
            "   1.78044457e-01 -1.20928397e-01 -1.95755604e-01  1.39914288e-01\n",
            "   2.00884282e-02]\n",
            " [ 5.06204563e-01  2.48784499e-01 -4.23937339e-01 -6.38616547e-02\n",
            "   1.50841772e-01 -2.48554524e-01 -9.98696199e-02  2.11773716e-01\n",
            "  -6.63427760e-02  3.42482482e-01 -9.23088332e-02 -3.90500312e-02\n",
            "   3.07000885e-01 -1.33120204e-01  2.24967544e-01  2.53207065e-01\n",
            "   1.64684509e-02]]\n",
            "[0.51653524 0.16769913 0.11249991 0.06588347 0.05432747 0.03082096\n",
            " 0.01810098 0.01283799]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ukuJtk5RhWrX",
        "outputId": "376abdc3-4a2b-4042-c898-bd64cfe481f3"
      },
      "source": [
        "regression_model = SVC()\n",
        "regression_model.fit(XScaled, y)\n",
        "regression_model.score(XScaled, y)\n",
        "a_SVC_all=regression_model.score(XScaled, y)"
      ],
      "execution_count": 288,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PkEv638_h6Kv",
        "outputId": "39991be2-6f2f-4e8b-96a6-0e68ff73a1a2"
      },
      "source": [
        "regression_model_pca = SVC()\n",
        "regression_model_pca.fit(Xpca8, y)\n",
        "a_SVC_PCA=regression_model_pca.score(Xpca8, y)\n",
        "regression_model_pca.score(Xpca8, y)\n",
        "## Optimised value of k is 8\n"
      ],
      "execution_count": 281,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.965559655596556"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 281
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "UF3NCAGSD35E",
        "outputId": "974c2c82-5813-47d1-82e0-870396a223d5"
      },
      "source": [
        "results=pd.DataFrame(data={'Model':['Accuracy'],'SVC_raw':[a_SVC],'SVC_min_maxscalo_Transform':[a_SVC_scalor],'svc_scaled_allPCA':[a_SVC_all],'PCA':[8],'SVC_PCA':[a_SVC_PCA]})\n",
        "results"
      ],
      "execution_count": 296,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>SVC_raw</th>\n",
              "      <th>SVC_min_maxscalo_Transform</th>\n",
              "      <th>svc_scaled_allPCA</th>\n",
              "      <th>PCA</th>\n",
              "      <th>SVC_PCA</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Accuracy</td>\n",
              "      <td>0.6598360655737705</td>\n",
              "      <td>0.9467213114754098</td>\n",
              "      <td>0.98032</td>\n",
              "      <td>8</td>\n",
              "      <td>0.96556</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      Model             SVC_raw  ... PCA  SVC_PCA\n",
              "0  Accuracy  0.6598360655737705  ...   8  0.96556\n",
              "\n",
              "[1 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 296
        }
      ]
    }
  ]
}